@model NetMeeting.Models.LocalPasswordModel

<h2>Change password</h2>

@using (Html.BeginForm("Manage", "Account", FormMethod.Post, new { @class = "form-horizontal" })) {
  @Html.AntiForgeryToken()
  <fieldset>
    <legend>Change Password Form</legend>

    @if (!ViewData.ModelState.IsValid) { @Html.ValidationSummary(false, null, new { @class = "alert alert-block alert-error" }) }

    <div class="control-group@((!ViewData.ModelState.IsValidField("OldPassword")) ? " error" : "")">
      @Html.LabelFor(m => m.OldPassword, new { @class = "control-label" })
      <div class="controls">
        @Html.PasswordFor(m => m.OldPassword)
        @Html.ValidationMessageFor(m => m.OldPassword, null, new { @class = "help-inline" })
      </div>
    </div>

    <div class="control-group@((!ViewData.ModelState.IsValidField("NewPassword")) ? " error" : "")">
      @Html.LabelFor(m => m.NewPassword, new { @class = "control-label" })
      <div class="controls">
        @Html.PasswordFor(m => m.NewPassword)
        @Html.ValidationMessageFor(m => m.NewPassword, null, new { @class = "help-inline" })
      </div>
    </div>

    <div class="control-group@((!ViewData.ModelState.IsValidField("ConfirmPassword")) ? " error" : "")">
      @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label" })
      <div class="controls">
        @Html.PasswordFor(m => m.ConfirmPassword)
        @Html.ValidationMessageFor(m => m.ConfirmPassword, null, new { @class = "help-inline" })
      </div>
    </div>

    <div class="form-actions">
      <button type="submit" class="btn btn-primary">Change password</button>
    </div>
  </fieldset>
}
